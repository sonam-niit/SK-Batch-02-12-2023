Normal Javascript code is synchronous means code is going to execute line by line.
function fn1(){
    console.log("Function 1 Executed");
}
function fn2(){
    console.log("Function 2 Executed");
}
function fn3(){
    console.log("Function 3 Executed");
}
fn1();
fn2();
fn3();

These all functions execute line by line.

Assume Function 2 is fetching data from server and to do that its taking some time.

function fn2(){
    setTimeout( function(){console.log("Function 2 Executed");} ,3000 )
}

setTimeout means it will wait for 3000 milliseconds means 3 seconds after that the function 
attached inside that will execute.

In this case If we execute the program function3 will not wait for function 2 because of
asynchnous functionality of JS.

-- puposuly if you want to ask the fun3 to wait then pass that function as callback function
to fn2 and then  call it after the fun2 task completed.

function fn1() {
    console.log("Function 1 Executed");
}
function fn2(cb) {
    setTimeout(function () { console.log("Function 2 Executed");cb(); }, 3000)
}
function fn3() {
    console.log("Function 3 Executed");
}

fn1();
fn2(fn3); //pass fn3 to fun2 as parameter

In this case the function 3 will execute after function2






