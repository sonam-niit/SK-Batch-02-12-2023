Backend Development
---------------------------
backend Logic

Node JS
-------------

Environment
Platform

We can use JavaScript as a backend language using Node Js platform
 how? because using Node we can run our JS program directly
without taking any help of HTML embedding, and not required to use any browser to run the code.

How to start?
-------------------------
Let's Install Node JS

node -v

npm -v

=============================================================================
Node JS is also having inbuilt set of modules and we can also create our own modules and we can also use the modules
which is already created by Someone.

CORE Modules (In built modules): http, fs, url, path, os

Local Modules: Which we can create and use it in different files

Third Party Modules: MySQL, mongodb, mongoose, express 

(To use thirdparty modules we can install and uninstall in our system using npm command)

----------------------------------------------------------------------------------------------

NPM: Node Package Manager
---------------------------------
It is helping us to manage all the packages of node using npm command
NPM you are not installing manually its coming by default when you install node js to your system.

If you want to get the pckages details you can check on npmjs.com

package.json file

It's project's configuration  file which is used to add project details, description, author details, starting file name
dependencies.

How to create file?

> npm init  

This command prompts your with multiples questions you can answer as per your project details and atlast the file is  getting created.

If you don't wnat to do this lengthy process then create default package.json file using below command.

> npm init -y

Once the Package.json file created after that you can start installing the required dependencies.

There are 2 ways to install dependencies

1: Global Installation: you can use it in your computer any where.

2. Local: you can use it in a particular folder where it is installed.

When you install locally the package.json file is getting updated and it will also create one lock file named package-lock.json file which is having the location from where the file is downloaded means its having the actual resource from where the library is getting downloaded.

Also, one folder created named node_modules which is having all the files downloaded of the dependency which you have installed.

> npm install express or npm i express
> npm i mysql
> npm i nodemon
> npm i express nodemon bcrypt mysql

How to uninstall

> npm uninstall express
> npm uninstall express mysql mongodb (uninstall multiple packages, package name must be separated by space)

If you want to check the installed dependencies in a particular folder then you can also execute below command
> npm ls 

-In some cases we want to install few dependencies which we can use through out our system for that we can install them globally.
-for global installation you can use -g command.

> npm i typescript -g

this will install the typescript globally so it will not update your local package.json file.

To check installed dependencies globally use below command

>npm ls -g 

if you have installed dependencies globally you can use that commands in terminal directly

>npm i nodemon -g
>nodemon -v

same if you want to uninstall global dependencies

> npm uninstall nodemon -g


===========================================================================================
in old version for local installation we are using --save flag

>npm i express --save 
 but now its similar to npm i express means no need to use --save flag.

============================================================================

While working with project we can install some dependencies at development level which is not required to use at production level.

> npm i jasmine --save-dev
> npm i nodemon --save-dev

(means we will use them only in development environment not in production (live))

==========================================================================================

Usually it is preferred to install dependencies locally because if you install them globally and if you try to update the version the global version is getting updated and because of that there are chances that you old project which you have created with old version won't work.

If you install locally it will work with required version.














































































